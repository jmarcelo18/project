// This file is an augmentation to the built-in ImportMeta interface
// Thus cannot contain any top-level imports
// <https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation>

interface ImportMetaEnv {
  [key: string]: any
  BASE_URL: string
  MODE: string
  DEV: boolean
  PROD: boolean
  SSR: boolean
}

interface ImportMeta {
  url: string

  readonly hot?: import('./hot').ViteHotContext

  readonly env: ImportMetaEnv

  glob: import('./importGlob').ImportGlobFunction
}

export interface Company {
  id: string;
  area: string;
  periodicity: string;
  company: string;
  observation: string;
  lastMaintenance: string;  // Diferente de last_maintenance
  nextMaintenance: string;  // Diferente de next_maintenance
  technicalResponsible: string;  // Diferente de technical_responsible
}

export interface AppContextType {
  companies: Company[];
  serviceCalls: ServiceCall[];
  visits: Visit[];
  avcbServices: AVCBService[];
  addCompany: (company: Omit<Company, 'id'>) => Promise<void>;
  updateCompany: (id: string, company: Omit<Company, 'id'>) => Promise<void>;
  deleteCompany: (id: string) => Promise<void>;
  addServiceCall: (call: Omit<ServiceCall, 'id'>) => Promise<void>;
  updateServiceCall: (id: string, call: Omit<ServiceCall, 'id'>) => Promise<void>;
  deleteServiceCall: (id: string) => Promise<void>;
  addVisit: (visit: Omit<Visit, 'id'>) => Promise<void>;
  updateVisit: (id: string, visit: Omit<Visit, 'id'>) => Promise<void>;
  deleteVisit: (id: string) => Promise<void>;
  addAVCBService: (service: Omit<AVCBService, 'id' | 'nextMaintenance' | 'daysToExpire'>) => Promise<void>;
  updateAVCBService: (id: string, service: Omit<AVCBService, 'id' | 'nextMaintenance' | 'daysToExpire'>) => Promise<void>;
  deleteAVCBService: (id: string) => Promise<void>;
}

const addCompany = async (company: Omit<Company, 'id'>) => {
  try {
    console.log('1. Dados recebidos do formulário:', company);

    // Converter os nomes dos campos para o formato do banco de dados (snake_case)
    const companyData = {
      area: company.area,
      periodicity: company.periodicity,
      company: company.company,
      observation: company.observation || null,
      last_maintenance: company.lastMaintenance,
      next_maintenance: company.nextMaintenance,
      technical_responsible: company.technicalResponsible
    };

    console.log('2. Dados convertidos para o formato do Supabase:', companyData);

    // Fazer a inserção
    const { data, error } = await supabase
      .from('companies')
      .insert([companyData])
      .select();

    console.log('3. Resposta da inserção:', { data, error });

    if (error) {
      console.error('4. Erro detalhado:', {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      });
      throw error;
    }

    if (data && data[0]) {
      // Converter os dados de volta para o formato da interface (camelCase)
      const convertedData = {
        id: data[0].id,
        area: data[0].area,
        periodicity: data[0].periodicity,
        company: data[0].company,
        observation: data[0].observation,
        lastMaintenance: data[0].last_maintenance,
        nextMaintenance: data[0].next_maintenance,
        technicalResponsible: data[0].technical_responsible
      };
      console.log('5. Dados convertidos de volta:', convertedData);
      setCompanies([...companies, convertedData]);
    }
  } catch (error) {
    console.error('6. Erro na operação:', error);
    throw error;
  }
};
